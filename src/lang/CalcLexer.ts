// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly POW = 11;
	public static readonly MUL = 12;
	public static readonly DIV = 13;
	public static readonly ADD = 14;
	public static readonly SUB = 15;
	public static readonly MOD = 16;
	public static readonly TRUE = 17;
	public static readonly FALSE = 18;
	public static readonly EQUAL = 19;
	public static readonly NOTEQUAL = 20;
	public static readonly GREATERTHANOREQUAL = 21;
	public static readonly LESSTHANOREQUAL = 22;
	public static readonly GREATERTHAN = 23;
	public static readonly LESSTHAN = 24;
	public static readonly LOGICALAND = 25;
	public static readonly LOGICALOR = 26;
	public static readonly LOGICALNOT = 27;
	public static readonly NUMBER = 28;
	public static readonly WHITESPACE = 29;
	public static readonly NEWLINE = 30;
	public static readonly SEMICOL = 31;
	public static readonly LINE_COMMENT = 32;
	public static readonly LET = 33;
	public static readonly VAR = 34;
	public static readonly INT = 35;
	public static readonly DOUBLE = 36;
	public static readonly BOOL = 37;
	public static readonly STRING = 38;
	public static readonly FUNC = 39;
	public static readonly RTN = 40;
	public static readonly ID = 41;
	public static readonly STR = 42;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "POW", "MUL", "DIV", "ADD", "SUB", "MOD", "TRUE", "FALSE", "EQUAL", 
		"NOTEQUAL", "GREATERTHANOREQUAL", "LESSTHANOREQUAL", "GREATERTHAN", "LESSTHAN", 
		"LOGICALAND", "LOGICALOR", "LOGICALNOT", "NUMBER", "WHITESPACE", "NEWLINE", 
		"SEMICOL", "LINE_COMMENT", "LET", "VAR", "INT", "DOUBLE", "BOOL", "STRING", 
		"FUNC", "RTN", "ID", "STR",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':'", "','", "'{'", "'}'", "'{\n'", "'='", "'('", "')'", "'->'", 
		"'.'", "'^'", "'*'", "'/'", "'+'", "'-'", "'%'", "'true'", "'false'", 
		"'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'&&'", "'||'", "'!'", undefined, 
		undefined, undefined, "';'", undefined, "'let'", "'var'", "'Int'", "'Double'", 
		"'Bool'", "'String'", "'func'", "'return'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "POW", "MUL", "DIV", "ADD", 
		"SUB", "MOD", "TRUE", "FALSE", "EQUAL", "NOTEQUAL", "GREATERTHANOREQUAL", 
		"LESSTHANOREQUAL", "GREATERTHAN", "LESSTHAN", "LOGICALAND", "LOGICALOR", 
		"LOGICALNOT", "NUMBER", "WHITESPACE", "NEWLINE", "SEMICOL", "LINE_COMMENT", 
		"LET", "VAR", "INT", "DOUBLE", "BOOL", "STRING", "FUNC", "RTN", "ID", 
		"STR",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02,\xFA\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03" +
		"\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
		"\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03" +
		"\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03" +
		"\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x06\x1D\x9E\n\x1D\r\x1D\x0E\x1D\x9F" +
		"\x03\x1E\x06\x1E\xA3\n\x1E\r\x1E\x0E\x1E\xA4\x03\x1E\x03\x1E\x03\x1F\x05" +
		"\x1F\xAA\n\x1F\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03!\x07!\xB4" +
		"\n!\f!\x0E!\xB7\v!\x03!\x05!\xBA\n!\x03!\x03!\x03!\x03!\x03\"\x03\"\x03" +
		"\"\x03\"\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x03" +
		"%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
		"*\x03*\x07*\xED\n*\f*\x0E*\xF0\v*\x03+\x03+\x07+\xF4\n+\f+\x0E+\xF7\v" +
		"+\x03+\x03+\x02\x02\x02,\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
		"\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I" +
		"\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02,\x03\x02\x07\x03\x022;\x04\x02" +
		"\v\v\"\"\x04\x02\f\f\x0F\x0F\x05\x02C\\aac|\x06\x022;C\\aac|\x02\u0100" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03" +
		"\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02" +
		"\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02" +
		"5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02" +
		"\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02" +
		"\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03" +
		"\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02" +
		"\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x03" +
		"W\x03\x02\x02\x02\x05Y\x03\x02\x02\x02\x07[\x03\x02\x02\x02\t]\x03\x02" +
		"\x02\x02\v_\x03\x02\x02\x02\rb\x03\x02\x02\x02\x0Fd\x03\x02\x02\x02\x11" +
		"f\x03\x02\x02\x02\x13h\x03\x02\x02\x02\x15k\x03\x02\x02\x02\x17m\x03\x02" +
		"\x02\x02\x19o\x03\x02\x02\x02\x1Bq\x03\x02\x02\x02\x1Ds\x03\x02\x02\x02" +
		"\x1Fu\x03\x02\x02\x02!w\x03\x02\x02\x02#y\x03\x02\x02\x02%~\x03\x02\x02" +
		"\x02\'\x84\x03\x02\x02\x02)\x87\x03\x02\x02\x02+\x8A\x03\x02\x02\x02-" +
		"\x8D\x03\x02\x02\x02/\x90\x03\x02\x02\x021\x92\x03\x02\x02\x023\x94\x03" +
		"\x02\x02\x025\x97\x03\x02\x02\x027\x9A\x03\x02\x02\x029\x9D\x03\x02\x02" +
		"\x02;\xA2\x03\x02\x02\x02=\xA9\x03\x02\x02\x02?\xAD\x03\x02\x02\x02A\xAF" +
		"\x03\x02\x02\x02C\xBF\x03\x02\x02\x02E\xC3\x03\x02\x02\x02G\xC7\x03\x02" +
		"\x02\x02I\xCB\x03\x02\x02\x02K\xD2\x03\x02\x02\x02M\xD7\x03\x02\x02\x02" +
		"O\xDE\x03\x02\x02\x02Q\xE3\x03\x02\x02\x02S\xEA\x03\x02\x02\x02U\xF1\x03" +
		"\x02\x02\x02WX\x07<\x02\x02X\x04\x03\x02\x02\x02YZ\x07.\x02\x02Z\x06\x03" +
		"\x02\x02\x02[\\\x07}\x02\x02\\\b\x03\x02\x02\x02]^\x07\x7F\x02\x02^\n" +
		"\x03\x02\x02\x02_`\x07}\x02\x02`a\x07\f\x02\x02a\f\x03\x02\x02\x02bc\x07" +
		"?\x02\x02c\x0E\x03\x02\x02\x02de\x07*\x02\x02e\x10\x03\x02\x02\x02fg\x07" +
		"+\x02\x02g\x12\x03\x02\x02\x02hi\x07/\x02\x02ij\x07@\x02\x02j\x14\x03" +
		"\x02\x02\x02kl\x070\x02\x02l\x16\x03\x02\x02\x02mn\x07`\x02\x02n\x18\x03" +
		"\x02\x02\x02op\x07,\x02\x02p\x1A\x03\x02\x02\x02qr\x071\x02\x02r\x1C\x03" +
		"\x02\x02\x02st\x07-\x02\x02t\x1E\x03\x02\x02\x02uv\x07/\x02\x02v \x03" +
		"\x02\x02\x02wx\x07\'\x02\x02x\"\x03\x02\x02\x02yz\x07v\x02\x02z{\x07t" +
		"\x02\x02{|\x07w\x02\x02|}\x07g\x02\x02}$\x03\x02\x02\x02~\x7F\x07h\x02" +
		"\x02\x7F\x80\x07c\x02\x02\x80\x81\x07n\x02\x02\x81\x82\x07u\x02\x02\x82" +
		"\x83\x07g\x02\x02\x83&\x03\x02\x02\x02\x84\x85\x07?\x02\x02\x85\x86\x07" +
		"?\x02\x02\x86(\x03\x02\x02\x02\x87\x88\x07#\x02\x02\x88\x89\x07?\x02\x02" +
		"\x89*\x03\x02\x02\x02\x8A\x8B\x07@\x02\x02\x8B\x8C\x07?\x02\x02\x8C,\x03" +
		"\x02\x02\x02\x8D\x8E\x07>\x02\x02\x8E\x8F\x07?\x02\x02\x8F.\x03\x02\x02" +
		"\x02\x90\x91\x07@\x02\x02\x910\x03\x02\x02\x02\x92\x93\x07>\x02\x02\x93" +
		"2\x03\x02\x02\x02\x94\x95\x07(\x02\x02\x95\x96\x07(\x02\x02\x964\x03\x02" +
		"\x02\x02\x97\x98\x07~\x02\x02\x98\x99\x07~\x02\x02\x996\x03\x02\x02\x02" +
		"\x9A\x9B\x07#\x02\x02\x9B8\x03\x02\x02\x02\x9C\x9E\t\x02\x02\x02\x9D\x9C" +
		"\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0" +
		"\x03\x02\x02\x02\xA0:\x03\x02\x02\x02\xA1\xA3\t\x03\x02\x02\xA2\xA1\x03" +
		"\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA2\x03\x02\x02\x02\xA4\xA5\x03" +
		"\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\b\x1E\x02\x02\xA7<\x03\x02" +
		"\x02\x02\xA8\xAA\x07\x0F\x02\x02\xA9\xA8\x03\x02\x02\x02\xA9\xAA\x03\x02" +
		"\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xAC\x07\f\x02\x02\xAC>\x03\x02\x02" +
		"\x02\xAD\xAE\x07=\x02\x02\xAE@\x03\x02\x02\x02\xAF\xB0\x071\x02\x02\xB0" +
		"\xB1\x071\x02\x02\xB1\xB5\x03\x02\x02\x02\xB2\xB4\n\x04\x02\x02\xB3\xB2" +
		"\x03\x02\x02\x02\xB4\xB7\x03\x02\x02\x02\xB5\xB3\x03\x02\x02\x02\xB5\xB6" +
		"\x03\x02\x02\x02\xB6\xB9\x03\x02\x02\x02\xB7\xB5\x03\x02\x02\x02\xB8\xBA" +
		"\x07\x0F\x02\x02\xB9\xB8\x03\x02\x02\x02\xB9\xBA\x03\x02\x02\x02\xBA\xBB" +
		"\x03\x02\x02\x02\xBB\xBC\x07\f\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBE" +
		"\b!\x02\x02\xBEB\x03\x02\x02\x02\xBF\xC0\x07n\x02\x02\xC0\xC1\x07g\x02" +
		"\x02\xC1\xC2\x07v\x02\x02\xC2D\x03\x02\x02\x02\xC3\xC4\x07x\x02\x02\xC4" +
		"\xC5\x07c\x02\x02\xC5\xC6\x07t\x02\x02\xC6F\x03\x02\x02\x02\xC7\xC8\x07" +
		"K\x02\x02\xC8\xC9\x07p\x02\x02\xC9\xCA\x07v\x02\x02\xCAH\x03\x02\x02\x02" +
		"\xCB\xCC\x07F\x02\x02\xCC\xCD\x07q\x02\x02\xCD\xCE\x07w\x02\x02\xCE\xCF" +
		"\x07d\x02\x02\xCF\xD0\x07n\x02\x02\xD0\xD1\x07g\x02\x02\xD1J\x03\x02\x02" +
		"\x02\xD2\xD3\x07D\x02\x02\xD3\xD4\x07q\x02\x02\xD4\xD5\x07q\x02\x02\xD5" +
		"\xD6\x07n\x02\x02\xD6L\x03\x02\x02\x02\xD7\xD8\x07U\x02\x02\xD8\xD9\x07" +
		"v\x02\x02\xD9\xDA\x07t\x02\x02\xDA\xDB\x07k\x02\x02\xDB\xDC\x07p\x02\x02" +
		"\xDC\xDD\x07i\x02\x02\xDDN\x03\x02\x02\x02\xDE\xDF\x07h\x02\x02\xDF\xE0" +
		"\x07w\x02\x02\xE0\xE1\x07p\x02\x02\xE1\xE2\x07e\x02\x02\xE2P\x03\x02\x02" +
		"\x02\xE3\xE4\x07t\x02\x02\xE4\xE5\x07g\x02\x02\xE5\xE6\x07v\x02\x02\xE6" +
		"\xE7\x07w\x02\x02\xE7\xE8\x07t\x02\x02\xE8\xE9\x07p\x02\x02\xE9R\x03\x02" +
		"\x02\x02\xEA\xEE\t\x05\x02\x02\xEB\xED\t\x06\x02\x02\xEC\xEB\x03\x02\x02" +
		"\x02\xED\xF0\x03\x02\x02\x02\xEE\xEC\x03\x02\x02\x02\xEE\xEF\x03\x02\x02" +
		"\x02\xEFT\x03\x02\x02\x02\xF0\xEE\x03\x02\x02\x02\xF1\xF5\x07$\x02\x02" +
		"\xF2\xF4\n\x04\x02\x02\xF3\xF2\x03\x02\x02\x02\xF4\xF7\x03\x02\x02\x02" +
		"\xF5\xF3\x03\x02\x02\x02\xF5\xF6\x03\x02\x02\x02\xF6\xF8\x03\x02\x02\x02" +
		"\xF7\xF5\x03\x02\x02\x02\xF8\xF9\x07$\x02\x02\xF9V\x03\x02\x02\x02\n\x02" +
		"\x9F\xA4\xA9\xB5\xB9\xEE\xF5\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

